<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo じゆう</title>
  
  <subtitle>码农Leo</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linkypi.github.io/"/>
  <updated>2019-05-07T13:49:44.592Z</updated>
  <id>https://linkypi.github.io/</id>
  
  <author>
    <name>Leo Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Async 库之 parallel 源码分析</title>
    <link href="https://linkypi.github.io/Nodejs/async-parallel/"/>
    <id>https://linkypi.github.io/Nodejs/async-parallel/</id>
    <published>2019-04-22T04:39:04.000Z</published>
    <updated>2019-05-07T13:49:44.592Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前面做过 series 的源码分析后，大体知道了其内部原理。现在来看看 parallel 实现。首先贴出重要代码部分（该case基于Async 2.6.2 做的分析）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">exports.parallel = parallelLimit;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallelLimit</span>(<span class="params">tasks, callback</span>) </span>&#123;</span><br><span class="line">    _parallel(eachOf, tasks, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与 series 调用同一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_parallel</span>(<span class="params">eachfn, tasks, callback</span>) </span>&#123;</span><br><span class="line">    callback = callback || noop;</span><br><span class="line">    <span class="keyword">var</span> results = isArrayLike(tasks) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    eachfn(tasks, <span class="function"><span class="keyword">function</span> (<span class="params">task, key, callback</span>) </span>&#123;</span><br><span class="line">        wrapAsync(task)(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                result = slice(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            results[key] = result;</span><br><span class="line">            callback(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        callback(err, results);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eachOf = <span class="function"><span class="keyword">function</span>(<span class="params">coll, iteratee, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 根据任务的不同返回不同实现，在 series 文章中分析过 isArrayLike </span></span><br><span class="line">    <span class="keyword">var</span> eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;</span><br><span class="line">    eachOfImplementation(coll, wrapAsync(iteratee), callback);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eachOf implementation optimized for array-likes</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eachOfArrayLike</span>(<span class="params">coll, iteratee, callback</span>) </span>&#123;</span><br><span class="line">    callback = once(callback || noop);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">        completed = <span class="number">0</span>,</span><br><span class="line">        length = coll.length;</span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">0</span>) &#123;</span><br><span class="line">        callback(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">iteratorCallback</span>(<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            callback(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((++completed === length) || value === breakLoop) &#123;</span><br><span class="line">            callback(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; index &lt; length; index++) &#123;</span><br><span class="line">        iteratee(coll[index], index, onlyOnce(iteratorCallback));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eachOfGeneric = doLimit(eachOfLimit, <span class="literal">Infinity</span>);</span><br></pre></td></tr></table></figure></p><p>这里涉及到两个实现：</p><ul><li><strong> eachOfArrayLike </strong></li><li><strong> eachOfGeneric </strong> </li></ul><p><strong><em>  1.  &emsp; eachOfGeneric  </em></strong><br>&emsp;&emsp; 先来分析使用 eachOfGeneric 的情况，实际 eachOfGeneric 就是 doLimit。只不过与 series 方法对比的话，这里的 limit 参数是一个无穷大的数（即当前执行任务的数量没有上限），而 series 的 limit 参数是 1，因为 series 需要保证顺序执行。 还是回到具体实现的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_eachOfLimit</span>(<span class="params">limit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj, iteratee, callback</span>) </span>&#123;</span><br><span class="line">        callback = once(callback || noop);</span><br><span class="line">        <span class="keyword">if</span> (limit &lt;= <span class="number">0</span> || !obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> nextElem = iterator(obj);</span><br><span class="line">        <span class="keyword">var</span> done = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> running = <span class="number">0</span>;     <span class="comment">// 记录当前正在执行的任务数</span></span><br><span class="line">        <span class="keyword">var</span> looping = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">iterateeCallback</span>(<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">            running -= <span class="number">1</span>;   <span class="comment">// 每执行完成一个任务就减一 </span></span><br><span class="line">            <span class="keyword">if</span> (err) &#123;      <span class="comment">// 出错则返回</span></span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                callback(err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里分两种情况：</span></span><br><span class="line">            <span class="comment">// 1. 跳出循环，即 value = &#123;&#125;</span></span><br><span class="line">            <span class="comment">// 2. 所有任务已全部执行完成，正是这里确保了所有任务执行完成后统一返回执行结果</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (value === breakLoop || (done &amp;&amp; running &lt;= <span class="number">0</span>)) &#123;</span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> callback(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!looping) &#123; </span><br><span class="line">                <span class="comment">// 此处不会响应，因为在 replenish 中会不断的执行任务，直到没有任务</span></span><br><span class="line">                <span class="comment">// 也就是 elem = null 时就已经 return 返回，也就不会执行  looping = false</span></span><br><span class="line">                replenish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replenish</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            looping = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (running &lt; limit &amp;&amp; !done) &#123; <span class="comment">// 还有未执行的任务 并且 当前执行的任务数小于上限，limit = Infinity</span></span><br><span class="line">                <span class="keyword">var</span> elem = nextElem();</span><br><span class="line">                <span class="keyword">if</span> (elem === <span class="literal">null</span>) &#123;</span><br><span class="line">                    done = <span class="literal">true</span>;        <span class="comment">// 任务已全部执行，等待所有任务完成</span></span><br><span class="line">                    <span class="keyword">if</span> (running &lt;= <span class="number">0</span>) &#123; <span class="comment">// 若任务已全部执行完成则返回</span></span><br><span class="line">                        callback(<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                running += <span class="number">1</span>; <span class="comment">// 每执行一个任务就加一</span></span><br><span class="line">                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));</span><br><span class="line">            &#125;</span><br><span class="line">            looping = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replenish();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该代码可以用这个入参做测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = &#123;</span><br><span class="line">    items:[</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; <span class="comment">//此处callback无效</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> test();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">            <span class="comment">// callback(null,result);</span></span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                callback(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">            &#125;, <span class="number">100</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                callback(<span class="literal">null</span>, <span class="number">12</span>);</span><br><span class="line">            &#125;, <span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    *[<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.items)&#123;</span><br><span class="line">            <span class="keyword">yield</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong><em>  2.  &emsp; eachOfArrayLike  </em></strong><br>下面来看看 eachOfArrayLike 的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eachOf implementation optimized for array-likes</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eachOfArrayLike</span>(<span class="params">coll, iteratee, callback</span>) </span>&#123;</span><br><span class="line">    callback = once(callback || noop);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">        completed = <span class="number">0</span>,</span><br><span class="line">        length = coll.length;</span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">0</span>) &#123;</span><br><span class="line">        callback(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">iteratorCallback</span>(<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            callback(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((++completed === length) || value === breakLoop) &#123;</span><br><span class="line">            callback(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; index &lt; length; index++) &#123;</span><br><span class="line">        iteratee(coll[index], index, onlyOnce(iteratorCallback));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>入参可以随便创建一个任务数组即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ar = [</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; <span class="comment">//此处callback无效</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> test();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        <span class="comment">// callback(null,result);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback(<span class="literal">null</span>, <span class="number">12</span>);</span><br><span class="line">        &#125;, <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这里不太明白为什么还要做 isArrayLike 区分，因为在 doLimit中已经做了区分。我将源码改为统一的 eachOfGeneric实现，然后使用任务数组做入参，结果并没有什么不同。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;前面做过 series 的源码分析后，大体知道了其内部原理。现在来看看 parallel 实现。首先贴出重要代码部分（该case基于Async 2.6.2 做的分析）：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://linkypi.github.io/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://linkypi.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Async 库之 series 源码分析</title>
    <link href="https://linkypi.github.io/Nodejs/async-series/"/>
    <id>https://linkypi.github.io/Nodejs/async-series/</id>
    <published>2019-04-22T04:39:04.000Z</published>
    <updated>2019-05-07T14:04:03.066Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;学习过Nodejs的同学应该少不了会遇到Async库，其中的series方法应该有人用过，好奇心作怪就做了一个测试案例来分析下内部实现。先上测试代码，其中包括同步任务及异步任务（该case基于Async 2.6.2 做的分析）：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resovle,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            resovle(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.series(&#123;</span><br><span class="line">    one: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; <span class="comment">//此处callback无效</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> test();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        <span class="comment">// callback(null,result);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    two: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// results is now equal to: &#123;one: 1, two: 2&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>点击series进入到源码，看到series方法调用的是 _parallel 方法，之后调用了很多高阶函数，容易晕。先把重要代码贴上：<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eachOfSeries = doLimit(eachOfLimit, <span class="number">1</span>);</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">series</span>(<span class="params">tasks, callback</span>) </span>&#123;</span><br><span class="line">   _parallel(eachOfSeries, tasks, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_parallel</span>(<span class="params">eachfn, tasks, callback</span>) </span>&#123;</span><br><span class="line">    callback = callback || noop;</span><br><span class="line">    <span class="keyword">var</span> results = isArrayLike(tasks) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    eachfn(tasks, <span class="function"><span class="keyword">function</span> (<span class="params">task, key, callback</span>) </span>&#123;</span><br><span class="line">        wrapAsync(task)(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                result = slice(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            results[key] = result;</span><br><span class="line">            callback(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        callback(err, results);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doLimit</span>(<span class="params">fn, limit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">iterable, iteratee, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn(iterable, limit, iteratee, callback);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eachOfLimit</span>(<span class="params">coll, limit, iteratee, callback</span>) </span>&#123;</span><br><span class="line">    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先分析主函数 _parallel，该方法主要部分是 eachfn，而eachfn实际上是 doLimit，再进入到 doLimit 后发现，实际就变成了执行  _eachOfLimit 内部函数，最终看到了执行的地方：<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_eachOfLimit</span>(<span class="params">limit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj, iteratee, callback</span>) </span>&#123;</span><br><span class="line">        callback = once(callback || noop);</span><br><span class="line">        <span class="keyword">if</span> (limit &lt;= <span class="number">0</span> || !obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> nextElem = iterator(obj);</span><br><span class="line">        <span class="keyword">var</span> done = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> running = <span class="number">0</span>;     <span class="comment">// 记录当前正在执行的任务数</span></span><br><span class="line">        <span class="keyword">var</span> looping = <span class="literal">false</span>; <span class="comment">// 标记任务在进入异步队列前的同步过程，执行中或结束</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">iterateeCallback</span>(<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">            running -= <span class="number">1</span>;   <span class="comment">// 每执行完成一个任务就减一 </span></span><br><span class="line">            <span class="keyword">if</span> (err) &#123;      <span class="comment">// 出错则返回</span></span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                callback(err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里分两种情况：</span></span><br><span class="line">            <span class="comment">// 1. 跳出循环，即 value = &#123;&#125;</span></span><br><span class="line">            <span class="comment">// 2. 所有任务已全部执行完成</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (value === breakLoop || (done &amp;&amp; running &lt;= <span class="number">0</span>)) &#123;</span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> callback(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!looping) &#123;</span><br><span class="line">                replenish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replenish</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            looping = <span class="literal">true</span>;   <span class="comment">// 同步过程执行中</span></span><br><span class="line">            <span class="comment">// 若仍有未执行的任务 并且 当前执行的任务数小于上限 limit = 1，即当前只有一个任务在执行</span></span><br><span class="line">            <span class="comment">// 所以这里就确保了任务的顺序执行，执行完成后 looping = false，回调后继续调用 replenish 执行下一个任务</span></span><br><span class="line">            <span class="keyword">while</span> (running &lt; limit &amp;&amp; !done) &#123; </span><br><span class="line">                <span class="keyword">var</span> elem = nextElem();</span><br><span class="line">                <span class="keyword">if</span> (elem === <span class="literal">null</span>) &#123;</span><br><span class="line">                    done = <span class="literal">true</span>;        <span class="comment">// 任务已全部执行，等待所有任务完成</span></span><br><span class="line">                    <span class="keyword">if</span> (running &lt;= <span class="number">0</span>) &#123; <span class="comment">// 若任务已全部执行完成则返回</span></span><br><span class="line">                        callback(<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                running += <span class="number">1</span>; <span class="comment">// 每执行一个任务就加一</span></span><br><span class="line">                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));</span><br><span class="line">            &#125;</span><br><span class="line">            looping = <span class="literal">false</span>; <span class="comment">// 同步过程已结束，等异步通知 iterateeCallback</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replenish();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过代码可以知道该方法是通过设置当前执行函数的个数来保证任务的顺序执行，即 limit=1。待前一个任务执行完成并通过callback返回后才执行下一个函数。该方法使用了一个running变量来标记当前正在执行的任务，每执行一个就加一，待回调完成后减一。</p><p>该方法的执行过程会涉及到几个问题：</p><ul><li><p><strong><em> 任务会分为同步任务及异步任务，如何保证他们正确顺序执行？</em></strong></p></li><li><p><strong><em> 假如series的任务参数是es6中迭代器对象，如何任务正确迭代遍历？</em></strong></p></li></ul><p><strong><em> 1 任务会分为同步任务及异步任务，如何保证他们正确顺序执行？</em></strong></p><p>&emsp;&emsp;同步任务很好理解，函数执行完成后直接调用callback函数即可返回，然后继续执行下一个任务。但是异步任务就有可能是一个Promise或者加了async关键字的函数.这时就需要判断一个函数是否是异步函数。单单判断函数异步是异步函数还不行，因为异步函数不会自动执行，所以还要异步函数可以自动执行然后顺利回调callback。<br>&emsp;&emsp;<strong> 1.1 &emsp;判断异步函数 </strong><br>&emsp;&emsp;查看源码可以看到：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> supportsSymbol = <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAsync</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> supportsSymbol &amp;&amp; fn[<span class="built_in">Symbol</span>.toStringTag] === <span class="string">'AsyncFunction'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   &emsp;&emsp;ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。Symbol 值通过 <strong> Symbol 函数 </strong> 生成。因为需要用到Symbol做判断，所以首先判断是否支持该原始类型。</p><p>   &emsp;&emsp;对象的Symbol.toStringTag属性，指向一个方法。在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型.<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line">(&#123;[<span class="built_in">Symbol</span>.toStringTag]: <span class="string">'Foo'</span>&#125;.toString())</span><br><span class="line"><span class="comment">// "[object Foo]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> [Symbol.toStringTag]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'xxx'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> Collection();</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(x) <span class="comment">// "[object xxx]"</span></span><br></pre></td></tr></table></figure></p><p>   通过阮大师的es了解到了以上情况，但是fn[Symbol.toStringTag] 为什么会是 ‘AsyncFunction’这个没理解。估计在内部做了封装。判断是否是异步函数还可以通过以下方式来判断（generator函数同理）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AsyncFunction = <span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;&#125;).constructor;</span><br><span class="line"></span><br><span class="line">asyncFn <span class="keyword">instanceof</span> AsyncFunction  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong> 1.2 &emsp;执行异步函数 </strong><br>&emsp;&emsp;通过以下代码可知，若当前函数是异步函数则将该函数做异步包装，通过func.apply(this, args)执行函数，若该函数返回的是一个Promise对象，则执行then函数获取执行结果，然后执行callback。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapAsync</span>(<span class="params">asyncFn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncify</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> initialParams(<span class="function"><span class="keyword">function</span> (<span class="params">args, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if result is Promise object</span></span><br><span class="line">        <span class="keyword">if</span> (isObject(result) &amp;&amp; <span class="keyword">typeof</span> result.then === <span class="string">'function'</span>) &#123;</span><br><span class="line">            result.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">                invokeCallback(callback, <span class="literal">null</span>, value);</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                invokeCallback(callback, err.message ? err : <span class="keyword">new</span> <span class="built_in">Error</span>(err));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callback(<span class="literal">null</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> initialParams = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="regexp">/*...args, callback*/</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = slice(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> callback = args.pop();</span><br><span class="line">        fn.call(<span class="keyword">this</span>, args, callback);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeCallback</span>(<span class="params">callback, error, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        callback(error, value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        setImmediate$<span class="number">1</span>(rethrow, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行callback时还加了一个try catch，若callback出现异常则通过异步的方式抛出该异常，可以看看这段代码。最先通过setImmediate方法抛出异常，若该方法没有则使用 process.nextTick ，若再没有则执行通过 setTimeout 方法抛出。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasSetImmediate = <span class="keyword">typeof</span> setImmediate === <span class="string">'function'</span> &amp;&amp; setImmediate;</span><br><span class="line"><span class="keyword">var</span> hasNextTick = <span class="keyword">typeof</span> process === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> process.nextTick === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fallback</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    setTimeout(fn, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrap</span>(<span class="params">defer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">fn<span class="regexp">/*, ...args*/</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = slice(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">        defer(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(<span class="literal">null</span>, args);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _defer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hasSetImmediate) &#123;</span><br><span class="line">    _defer = setImmediate;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasNextTick) &#123;</span><br><span class="line">    _defer = process.nextTick;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _defer = fallback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setImmediate$<span class="number">1</span> = wrap(_defer);</span><br></pre></td></tr></table></figure></p><p>看过Promise源码的应该可以知道Promise也是使用该方式来保证任务的异步执行，只是没有用到 setTimeout 方法。代码注释里说到为什么要首先使用setImmediate，是因为process.nextTick无法处理递归调用。对这块还不太理解，小伙伴们知道的麻烦告知一声。<br><img src="./20190420182907.png" alt></p><p><strong><em> 2 假如series的任务参数是es6中迭代器对象，如何任务正确迭代遍历？</em></strong><br>&emsp;&emsp;在es6之前我们传入的参数可以是一个数组或者json对象，但在es6增加了一个生成器函数。生成器函数会返回一个迭代器对象。默认情况下定义的对象（object）是不可迭代的，但是可以通过Symbol.iterator创建迭代器。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = &#123;</span><br><span class="line">    items:[<span class="number">5</span>,<span class="number">9</span>,<span class="number">18</span>],</span><br><span class="line">    *[<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.items)&#123;</span><br><span class="line">            <span class="keyword">yield</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> list)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item); <span class="comment">//5,9,18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以series的入参也就可以是一个可迭代的对象。测试代码修改如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将我们的任务直接放到items数组中，items这个属性可以自行定义，只要保证正确遍历即可</span></span><br><span class="line"><span class="keyword">const</span> list = &#123;</span><br><span class="line">    items:[<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; <span class="comment">//此处callback无效</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> test();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        <span class="comment">// callback(null,result);</span></span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;],</span><br><span class="line">    *[<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.items)&#123;</span><br><span class="line">            <span class="keyword">yield</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span>.series(list, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// results is now equal to: &#123;one: 1, two: 2&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>代码分析到这里，应该就可以想到series的入参是需要判断的。该参数很有可能是一个迭代器对象。通过源码可以发下这里面做了判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _eachOfLimit 方法中的( async 2.6.2 )：</span></span><br><span class="line"><span class="comment">//   var nextElem = iterator(obj); // line 979</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">coll</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(coll)) &#123;</span><br><span class="line">        <span class="keyword">return</span> createArrayIterator(coll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> iterator = getIterator(coll);</span><br><span class="line">    <span class="keyword">return</span> iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./20190420174458.png" alt></p><p><img src="./20190420174957.png" alt></p><p>针对不同的入参就需要不同的遍历方式：</p><ul><li><p><strong>若是数组则通过下标进行遍历</strong></p></li><li><p><strong>若是生成器返回的迭代器对象则通过next()的方式进行遍历</strong></p></li><li><p><strong>若只是一个对象，则通过遍历其所有的key进行遍历</strong></p></li></ul><p>数组遍历的方式就不用说了，咱们来看看其他两种方式<br><strong>2.1 &emsp;通过生成器返回的迭代器进行遍历</strong><br>&emsp;&emsp;该迭代器是通过next()方法来获得当前对象，其中包含done（是否遍历完成），value（当前元素）。学过Java或C#应该容易理解，他们都有一个hasNext()及next()方法，hasNext()用于判断是否还有下一个元素，next()用于获取下一个元素。生成器generator是通过协程的方式实现，这个还需深入了解。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createES2015Iterator</span>(<span class="params">iterator</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> i = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> item = iterator.next();</span><br><span class="line">          <span class="keyword">if</span> (item.done)</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">          i++;</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">value</span>: item.value, <span class="attr">key</span>: i&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.2 &emsp;通过遍历所有的key进行遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObjectIterator</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> okeys = keys(obj);</span><br><span class="line">      <span class="keyword">var</span> i = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">var</span> len = okeys.length;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> key = okeys[++i];</span><br><span class="line">          <span class="keyword">return</span> i &lt; len ? &#123;<span class="attr">value</span>: obj[key], <span class="attr">key</span>: key&#125; : <span class="literal">null</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>该方式的重点在keys方法，该遍历方式远比我想象的要复杂些。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keys</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayLikeKeys</span>(<span class="params">value, inherited</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isArr = isArray(value),</span><br><span class="line">      isArg = !isArr &amp;&amp; isArguments(value),</span><br><span class="line">      isBuff = !isArr &amp;&amp; !isArg &amp;&amp; isBuffer(value),</span><br><span class="line">      isType = !isArr &amp;&amp; !isArg &amp;&amp; !isBuff &amp;&amp; isTypedArray(value),</span><br><span class="line">      skipIndexes = isArr || isArg || isBuff || isType,</span><br><span class="line">      result = skipIndexes ? baseTimes(value.length, <span class="built_in">String</span>) : [],</span><br><span class="line">      length = result.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((inherited || hasOwnProperty$<span class="number">1.</span>call(value, key)) &amp;&amp;</span><br><span class="line">        !(skipIndexes &amp;&amp; (</span><br><span class="line">           <span class="comment">// Safari 9 has enumerable `arguments.length` in strict mode.</span></span><br><span class="line">           key == <span class="string">'length'</span> ||</span><br><span class="line">           <span class="comment">// Node.js 0.10 has enumerable non-index properties on buffers.</span></span><br><span class="line">           (isBuff &amp;&amp; (key == <span class="string">'offset'</span> || key == <span class="string">'parent'</span>)) ||</span><br><span class="line">           <span class="comment">// PhantomJS 2 has enumerable non-index properties on typed arrays.</span></span><br><span class="line">           (isType &amp;&amp; (key == <span class="string">'buffer'</span> || key == <span class="string">'byteLength'</span> || key == <span class="string">'byteOffset'</span>)) ||</span><br><span class="line">           <span class="comment">// Skip index properties.</span></span><br><span class="line">           isIndex(key, length)</span><br><span class="line">        ))) &#123;</span><br><span class="line">      result.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseKeys</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isPrototype(object)) &#123;</span><br><span class="line">    <span class="keyword">return</span> nativeKeys(object);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="built_in">Object</span>(object)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasOwnProperty$<span class="number">3.</span>call(object, key) &amp;&amp; key != <span class="string">'constructor'</span>) &#123;</span><br><span class="line">      result.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>keys方法会使用 isArrayLike 方法先判断当前对象是否是类似数组的对象，即判断</p><ul><li><strong> 该对象不是函数，该判断有些复杂，还考虑了浏览器兼容问题</strong> </li><li><strong> 该对象拥有value.length属性，并且该值是一个大于-1且小于MAX_SAFE_INTEGER的整数 </strong><br>注意这里必须是整数，这里有一个巧妙的设计，即： value %  1== 0。可以拿一个小数 2.4 验证一下<br><img src="./20190420195011.png" alt></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks if `value` is array-like. A value is considered array-like if it's</span></span><br><span class="line"><span class="comment"> * not a function and has a `value.length` that's an integer greater than or</span></span><br><span class="line"><span class="comment"> * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @static</span></span><br><span class="line"><span class="comment"> * @memberOf _</span></span><br><span class="line"><span class="comment"> * @since 4.0.0</span></span><br><span class="line"><span class="comment"> * @category Lang</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; value The value to check.</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; Returns `true` if `value` is array-like, else `false`.</span></span><br><span class="line"><span class="comment"> * @example</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _.isArrayLike([1, 2, 3]);</span></span><br><span class="line"><span class="comment"> * // =&gt; true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _.isArrayLike(document.body.children);</span></span><br><span class="line"><span class="comment"> * // =&gt; true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _.isArrayLike('abc');</span></span><br><span class="line"><span class="comment"> * // =&gt; true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _.isArrayLike(_.noop);</span></span><br><span class="line"><span class="comment"> * // =&gt; false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; isLength(value.length) &amp;&amp; !isFunction(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLength</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value == <span class="string">'number'</span> &amp;&amp;</span><br><span class="line">    value &gt; <span class="number">-1</span> &amp;&amp; value % <span class="number">1</span> == <span class="number">0</span> &amp;&amp; value &lt;= MAX_SAFE_INTEGER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** `Object#toString` result references. */</span></span><br><span class="line"><span class="keyword">var</span> asyncTag = <span class="string">'[object AsyncFunction]'</span>;</span><br><span class="line"><span class="keyword">var</span> funcTag = <span class="string">'[object Function]'</span>;</span><br><span class="line"><span class="keyword">var</span> genTag = <span class="string">'[object GeneratorFunction]'</span>;</span><br><span class="line"><span class="keyword">var</span> proxyTag = <span class="string">'[object Proxy]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// The use of `Object#toString` avoids issues with the `typeof` operator</span></span><br><span class="line">  <span class="comment">// in Safari 9 which returns 'object' for typed arrays and other constructors.</span></span><br><span class="line">  <span class="keyword">var</span> tag = baseGetTag(value);</span><br><span class="line">  <span class="keyword">return</span> tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">typeof</span> value;</span><br><span class="line">  <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; (type == <span class="string">'object'</span> || type == <span class="string">'function'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来想弄一个测试案例来试试 arrayLikeKeys 方法，但是不太好举例，因为在 iterator 方法中已经做了一次 isArrayLike 的判断，所以按照给方法进去的话应该就不会在走 arrayLikeKeys 方法。arrayLikeKeys 这块的实现有时间可以研究下，这里就做了其他的案例测试。<br>&emsp;&emsp;将我传入的参数改为如下 obj 对象，执行会报错，因为有两个属性不是函数。所以执行的时候会出错<br><img src="./20190420193031.png" alt></p><p>series实现暂且分析到这里，通过源码分析可以发现一些有趣的实现，比如如何确保函数只会执行一次，有两个方法实现一个是once，一个是onlyOnce， 一目了然。他们都是使用了高阶函数，然后将函数复制一份后赋值 null ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fn === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> callFn = fn;</span><br><span class="line">        fn = <span class="literal">null</span>;</span><br><span class="line">        callFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onlyOnce</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fn === <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Callback was already called."</span>);</span><br><span class="line">        <span class="keyword">var</span> callFn = fn;</span><br><span class="line">        fn = <span class="literal">null</span>;</span><br><span class="line">        callFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;学习过Nodejs的同学应该少不了会遇到Async库，其中的series方法应该有人用过，好奇心作怪就做了一个测试案例来分析下内部实现。先上测试代码，其中包括同步任务及异步任务（该case基于Async 2.6.2 做的分析）：&lt;/p&gt;
   &lt;fi
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://linkypi.github.io/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://linkypi.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>将Ado.net中的事务抽离到业务层</title>
    <link href="https://linkypi.github.io/C/Aop/ado-net-declarative-tx/"/>
    <id>https://linkypi.github.io/C/Aop/ado-net-declarative-tx/</id>
    <published>2017-06-01T16:00:00.000Z</published>
    <updated>2019-05-07T13:47:03.735Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp; &emsp;最近在实现一个简单的审批功能，涉及到一些事务的处理。一个管控台项目，我使用的是最简单的三层架构。使用的是Ado.net操作数据库。先看一段我们经常用到的事务代码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection con = <span class="keyword">new</span> Sqlconnection(<span class="string">"数据库连接语句"</span>);</span><br><span class="line">con.Open();</span><br><span class="line"><span class="keyword">var</span> trans = con.BeginTransaction();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">     SqlCommand com = <span class="keyword">new</span> SqlCommand(trans);</span><br><span class="line">     <span class="comment">//处理插入或更新逻辑</span></span><br><span class="line">     trans.Commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">     trans.Rollback();<span class="comment">//如果前面有异常则事务回滚</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">     con.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> &emsp; &emsp;我一直以来都是使用下面这种方式在Dao来处理事务，其实怎么看都觉得他别扭，就拿我做的审批功能来说，当前审批人通过之后需要生成一条审批记录（记作表ApprovalHistory），同时将当前申请单的当前审批人指向下一个处理者(记作Apply)，而一般的三层架构都会有自身的Service层，理想的情况应该是在Service层用事务来处理相应的逻辑。<br>       正常的处理逻辑应该是将事务提取出来，应用层不应该过多的去关心底层的实现。乱糟糟的代码写在一起分层感觉也没啥意思了。如果可以像Spring那样使用Annotation的方式就一行代码来实现事务这样不是很好吗。这个问题确实想了挺久，后来有位boss和我说了下他的实现，喜出望外！先贴贴代码实现</p><h4 id="Boss的实现"><a href="#Boss的实现" class="headerlink" title="Boss的实现"></a><strong>Boss的实现</strong></h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConnId</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> mConnId = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">private</span> DateTime mCreateTime = DateTime.Now;</span><br><span class="line">                </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> MConnId</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.mConnId; &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">ConnId</span>(<span class="params"><span class="keyword">int</span> connid</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">this</span>.mConnId = connid;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbConnection</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> sConnStr = <span class="string">"从配置中读取连接字符串"</span>;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">long</span> MAX_LAST_TIME_LEN = <span class="number">10</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">60</span>; </span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> ConnId mConnId = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">private</span> SqlConnection mConn = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">private</span> SqlCommand mSqlCmd= <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">private</span> DateTime mCreateTime = DateTime.Now;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">string</span> mTransName = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> ConnId MConnId</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.mConnId; &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> SqlConnection Connection</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.mConn; &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> SqlCommand SqlCmd</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.mSqlCmd; &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> ConnectionState State</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (mConn == <span class="literal">null</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">return</span> ConnectionState.Broken;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">return</span> mConn.State;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">DbConnection</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">internal</span> ConnId <span class="title">ConnOpen</span>(<span class="params">HttpRequest request</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">this</span>.mConn = <span class="keyword">new</span> SqlConnection(sConnStr);</span><br><span class="line">               <span class="keyword">this</span>.mSqlCmd = <span class="keyword">new</span> SqlCommand();</span><br><span class="line">               mSqlCmd.Connection = <span class="keyword">this</span>.mConn;</span><br><span class="line">               <span class="keyword">this</span>.mConnId = <span class="keyword">new</span> ConnId(<span class="keyword">this</span>.GetHashCode());</span><br><span class="line">               mConn.Open();</span><br><span class="line">               <span class="keyword">if</span> (request == <span class="literal">null</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   mTransName = <span class="string">"null"</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                   mTransName = GetSrcFileName(request);</span><br><span class="line">               &#125;</span><br><span class="line">               mSqlCmd.Transaction =</span><br><span class="line">                   mConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted,</span><br><span class="line">                   mTransName);</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.mConn.State != System.Data.ConnectionState.Closed)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">this</span>.mConn.Close();</span><br><span class="line">                   <span class="keyword">this</span>.mConn.Dispose();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">this</span>.mConnId = <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.mConnId;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">internal</span> ConnId <span class="title">ConnOpen</span>(<span class="params"><span class="keyword">string</span> src</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">this</span>.mConn = <span class="keyword">new</span> SqlConnection(sConnStr);</span><br><span class="line">               <span class="keyword">this</span>.mSqlCmd = <span class="keyword">new</span> SqlCommand();</span><br><span class="line">               mSqlCmd.Connection = <span class="keyword">this</span>.mConn;</span><br><span class="line">               <span class="keyword">this</span>.mConnId = <span class="keyword">new</span> ConnId(<span class="keyword">this</span>.GetHashCode());</span><br><span class="line">               mConn.Open();</span><br><span class="line">               mTransName = src;</span><br><span class="line">               mSqlCmd.Transaction =</span><br><span class="line">                   mConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted,</span><br><span class="line">                   mTransName);</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.mConn.State != System.Data.ConnectionState.Closed)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">this</span>.mConn.Close();</span><br><span class="line">                   <span class="keyword">this</span>.mConn.Dispose();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">this</span>.mConnId = <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.mConnId;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">internal</span> Exception <span class="title">Cancel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Exception ex = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">               mSqlCmd.Transaction.Rollback();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">               mSqlCmd.Transaction.Rollback();</span><br><span class="line">               ex = e;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">finally</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (mSqlCmd != <span class="literal">null</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">this</span>.mSqlCmd.Dispose();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.mConn.State != System.Data.ConnectionState.Closed)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">this</span>.mConn.Close();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               memberClear();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> ex;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">internal</span> Exception <span class="title">Close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Exception ex = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">               mSqlCmd.Transaction.Commit();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">               mSqlCmd.Transaction.Rollback();</span><br><span class="line">               ex = e;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">finally</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (mSqlCmd != <span class="literal">null</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">this</span>.mSqlCmd.Dispose();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.mConn.State != System.Data.ConnectionState.Closed)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">this</span>.mConn.Close();</span><br><span class="line">                   <span class="keyword">this</span>.mConn.Dispose();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               memberClear();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> ex;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">internal</span> <span class="keyword">bool</span> <span class="title">IfExpried</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">if</span> (mConnId != <span class="literal">null</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (mCreateTime != DateTime.MinValue)</span><br><span class="line">               &#123;</span><br><span class="line">                   DateTime now = DateTime.Now;</span><br><span class="line">                   <span class="keyword">if</span> (now.Ticks - <span class="keyword">this</span>.mCreateTime.Ticks &gt; MAX_LAST_TIME_LEN)</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">memberClear</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           mConnId = <span class="literal">null</span>;</span><br><span class="line">           mConn = <span class="literal">null</span>;</span><br><span class="line">           mSqlCmd= <span class="literal">null</span>;</span><br><span class="line">           mCreateTime = DateTime.MinValue;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">GetSrcFileName</span>(<span class="params">HttpRequest r</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           FileInfo fi = <span class="keyword">new</span> FileInfo(r.PhysicalPath);</span><br><span class="line">           <span class="keyword">string</span> filename = fi.Name.Replace(fi.Extension, <span class="string">""</span>);</span><br><span class="line">           <span class="keyword">if</span> (filename.Length &gt; <span class="number">32</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               filename = filename.Substring(filename.Length - <span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> filename;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">GetSrcFileName</span>(<span class="params"><span class="keyword">string</span> src</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> src.Substring(src.Length - <span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">GetShortTime</span>(<span class="params">DateTime t</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">string</span> str = t.Day.ToString() + <span class="string">"_"</span> + t.Hour.ToString() + <span class="string">":"</span> +</span><br><span class="line">               t.Minute.ToString() + <span class="string">":"</span> + t.Second.ToString();</span><br><span class="line">           <span class="keyword">return</span> str;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConnPool</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> sLocker = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;ConnId, DbConnection&gt; sConnList = <span class="keyword">new</span> Dictionary&lt;ConnId, DbConnection&gt;(MAX_CONCURRENT_CONN_COUNT);</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">int</span> MAX_CONCURRENT_CONN_COUNT = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sCount</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> sConnList.Keys.Count; &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConnId <span class="title">CreateConn</span>(<span class="params">HttpRequest request</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           DbConnection dbconn = <span class="literal">null</span>;</span><br><span class="line">           ConnId key = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               dbconn = <span class="keyword">new</span> DbConnection();</span><br><span class="line">               key = dbconn.ConnOpen(request);</span><br><span class="line">               <span class="keyword">if</span> (sConnList.ContainsKey(key))</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">return</span> key;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (sCount &lt; MAX_CONCURRENT_CONN_COUNT)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">lock</span> (sLocker)</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">if</span> (sCount &lt; MAX_CONCURRENT_CONN_COUNT)</span><br><span class="line">                       &#123;</span><br><span class="line">                           sConnList.Add(key, dbconn);</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                       &#123;</span><br><span class="line">                          <span class="comment">//log</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">               key = <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> key;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConnId <span class="title">CreateConn</span>(<span class="params"><span class="keyword">string</span> src</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           DbConnection dbconn = <span class="literal">null</span>;</span><br><span class="line">           ConnId key = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               dbconn = <span class="keyword">new</span> DbConnection();</span><br><span class="line">               key = dbconn.ConnOpen(src);</span><br><span class="line">               <span class="keyword">if</span> (sCount &lt; MAX_CONCURRENT_CONN_COUNT)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">lock</span> (sLocker)</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">if</span> (sCount &lt; MAX_CONCURRENT_CONN_COUNT)</span><br><span class="line">                       &#123;</span><br><span class="line">                           sConnList.Add(key, dbconn);</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                       &#123;</span><br><span class="line">                           <span class="comment">//log</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">               key = <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> key;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ReleaseConn</span>(<span class="params">ConnId connid</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           DbConnection conn = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">lock</span> (sLocker)</span><br><span class="line">               &#123;</span><br><span class="line">                   conn = sConnList[connid];</span><br><span class="line">                   sConnList.Remove(connid);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (conn != <span class="literal">null</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   conn.Close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">CancelConn</span>(<span class="params">ConnId connid</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           DbConnection conn = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">lock</span> (sLocker)</span><br><span class="line">               &#123;</span><br><span class="line">                   conn = sConnList[connid];</span><br><span class="line">                   sConnList.Remove(connid);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (conn != <span class="literal">null</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   conn.Cancel();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//log</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DbConnection <span class="title">GetDbConn</span>(<span class="params">ConnId connid</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> sConnList[connid];</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  然后使用的时候呢就像这样就可以：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyTest</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         ConnId conn = ConnPool.CreateConn(<span class="string">"123"</span>);</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">var</span> aservice = <span class="keyword">new</span> ApplyService();</span><br><span class="line">             <span class="keyword">var</span> historyService = <span class="keyword">new</span> ApprovalHistoryService();</span><br><span class="line">             aservice.Update(<span class="keyword">new</span> <span class="keyword">object</span>(), conn);</span><br><span class="line">             historyService.Insert(<span class="keyword">new</span> <span class="keyword">object</span>(), conn);</span><br><span class="line"></span><br><span class="line">             ConnPool.ReleaseConn(conn);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">         &#123;</span><br><span class="line">             ConnPool.CancelConn(conn);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> &emsp; &emsp;可以看到这里主要是在ConnPool中使用一个Dictionary加双重检查锁定来实现一个并发连接的处理，用于记录当前的数据库连接。而到执行Insert和Update时他就通过connid在ConnPool中取出对应事务中的SqlCommand来执行相应的Sql 。也就是说他将数据库连接及事务抽离，放到了一个ConnPool中管理。基本符合我预期。</p><h4 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a><strong>问题来了</strong></h4><p>  &emsp; &emsp;如果认真看着里面的实现大家应该会发现这里存在一些问题。</p><h6 id="1-并发字典的实现"><a href="#1-并发字典的实现" class="headerlink" title="1 并发字典的实现"></a><strong>1 并发字典的实现</strong></h6><p>   &emsp; &emsp;头一个我想到的就是双重检查锁定的问题，虽然老总说他们用了那么久一直没有什么问题，但我想说那是因为并发量不大所以没有发现问题，并发量大的情况下使用lock的性能是明显下降的，这就让我想起了Java中从HashMap 到 HashTable 再到 ConcurrentHashMap的转变。HashMap是非线程安全类，所以用在多线程环境下就很可能出现意想不到的结果。所以才有了HashTable，我印象当中HashTale的实现是在HashMap的基础上为每个方法加了synchronized关键字，所以每次Add或Remove都会锁住整个内部的数组，可以想象一下在多线程环境下这里面的操作会有多慢。所以才有了ConcurrentHashMap的实现，其内部使用的是可重入锁，而锁住的是每一个segment段而不是整个数组。更重要的是锁的实现（基础框架是队列同步器AbstractQueuedSynchronizer），追究到最底层实现是使用CAS加自旋，一种乐观锁的方式来实现，从而保证了并发性。从HashMap 到 HashTable 再到 ConcurrentHashMap的转变真让我回味良久，从里面数据结构的设计到并发的处理真是妙不可言。学习Java的朋友应该知道这可以从放腾飞中的《并发编程的艺术》中了解到，初学者看可能会晕，我第一次看了一小部分后是拒绝的，因为看得想吐，心里在咒骂这他妈都写的什么鬼，哈哈！再后来慢慢看就有所体会了，而且有些地方还要反复琢磨。从这本书可以了解到很多并发编程的底层实现，极力推荐！！！<br>         &emsp;&emsp;所以我也并不推荐自己去实现一个线程安全的Dictionary，因为里边涉及到太多的细节不是我们所能预料的，除非自己真的非常熟悉底层的实现，对并发编程了然于胸。看过.Net中的 Dictionary实现后会发现它与HashMap的实现大体无异，虽然没有看过.Net中ConcurrentDictionary的实现，但是个人感觉他们的实现大体上应该相差无几。所以可以考虑使用ConcurrentDictionary来替换老总ConnPool的内部实现，这部分代码就不贴了。</p><h6 id="2-非托管资源的释放"><a href="#2-非托管资源的释放" class="headerlink" title="2 非托管资源的释放"></a><strong>2 非托管资源的释放</strong></h6><p> &emsp; &emsp;对于非托管资源的释放我建议是使用继承接口IDisposable来实现其Dispose()方法，具体请参考.Net圣经 -《CLR via C# 第4版 》。<br>  &emsp; &emsp;</p><p>####<strong>改进</strong><br>&emsp;&emsp; 虽然老总的实现能抽离的底层的实现，但是还不够优雅，因为在代码的最后都要去手动实现事务的提交和回滚。那有没有更好的办法来实现不用手动提交和回滚呢，就像Spring中事务，只需要在方法中加注解就可以达到指定功能。当然初期先来一个简单的实现。.Net中的Attribute对应的就是Java中的注解，但是这个Attribute还必须具备Aop的功能。这样才可以在方法执行前开启一个事务，方法执行完成后提交或回滚事务。</p><h5 id="1-Aop"><a href="#1-Aop" class="headerlink" title="1. Aop"></a><strong>1. Aop</strong></h5><p>&emsp;&emsp; 一般使用的较多的是Autofac和Castle，当然还可以使用Remoting代理方式或者从ContextBoundObject中派生来实现。刚好找到一篇文章说到了<a href="https://ayende.com/blog/2615/7-approaches-for-aop-in-net" target="_blank" rel="noopener">.net实现Aop的七种方式</a>。</p><table><thead><tr><th style="text-align:left">Approach</th><th style="text-align:right">Advantages</th><th style="text-align:center">Disadvantages</th></tr></thead><tbody><tr><td style="text-align:left">Remoting Proxies</td><td style="text-align:right">Easy to implement, because of the .Net framework support</td><td style="text-align:center">Somewhat heavyweight  Can only be used on interfaces or MarshalByRefObjects</td></tr><tr><td style="text-align:left">Derivingfrom ContextBoundObject</td><td style="text-align:right">Easiest to implement Native support for call interception</td><td style="text-align:center">Very costly in terms of performance</td></tr><tr><td style="text-align:left">Compile-time subclassing ( Rhino Proxy )</td><td style="text-align:right">Easiest to understand</td><td style="text-align:center">Interfaces or virtual methods only</td></tr><tr><td style="text-align:left">Runtime subclassing ( Castle Dynamic Proxy )</td><td style="text-align:right">Easiest to understand Very flexible</td><td style="text-align:center">Complex implementation (but alreadyexists) Interfaces or virtual methods only</td></tr><tr><td style="text-align:left">Hooking into the profiler API ( Type Mock )</td><td style="text-align:right">Extremely powerful</td><td style="text-align:center">Performance? Complex implementation (COM API, require separate runner, etc)</td></tr><tr><td style="text-align:left">Compile time IL-weaving ( Post Sharp / Cecil )</td><td style="text-align:right">Very powerful Good performance</td><td style="text-align:center">Very hard to implement</td></tr><tr><td style="text-align:left">Runtime IL-weaving ( Post Sharp / Cecil )</td><td style="text-align:right">Very powerful Good performance</td><td style="text-align:center">Very hard to implement</td></tr></tbody></table><p>当然这只是前人做的一个总结，具体的性能及优缺点还需要自己去考量。<br>编译时AOP工具有：PostSharp、LinFu、SheepAspect、Fody、CIL操作工具。<br>运行时AOP工具：Castle Windsor/DynamicProxy、StructureMap、Unity、Spring.NET。<br>&emsp;&emsp; 我用得比较多的是运行时Aop，比如Castle、Autofac.他们都是使用动态代理的方式来实现。来看看Castle是怎么实现的<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">using</span> Castle.DynamicProxy;</span><br><span class="line"> <span class="keyword">using</span> System;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ProxyGenerator generator = <span class="keyword">new</span> ProxyGenerator();</span><br><span class="line">        SimpleInterceptor interceptor = <span class="keyword">new</span> SimpleInterceptor();</span><br><span class="line"> </span><br><span class="line">        Person person = generator.CreateClassProxy&lt;Person&gt;(interceptor);</span><br><span class="line">        person.SayHello();</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"hello world."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SayName</span>(<span class="params"><span class="keyword">string</span> hometown</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"I'm Lynch, I'm from &#123;0&#125;."</span>, hometown);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayOther</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Yeah, I'm Chinese."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleInterceptor</span> : <span class="title">StandardInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PreProceed</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"before invocation , method : &#123;0&#125;."</span>, invocation.Method.Name);</span><br><span class="line">        <span class="keyword">base</span>.PreProceed(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PerformProceed</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"before performing ..."</span>);</span><br><span class="line">        <span class="keyword">base</span>.PerformProceed(invocation);</span><br><span class="line">        Console.WriteLine(<span class="string">"after performing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PostProceed</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"after invacation , method : &#123;0&#125;."</span>, invocation.Method.Name);</span><br><span class="line">        <span class="keyword">base</span>.PostProceed(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>动态代理的方式有个不好的地方就是每次都要生成指定类型的代理类，要实现Aop的方法还必须是virtual方法. 如果有很多类很多方法需要拦截那增加和改动的代码就有点多。我想达到的目标是只要一个Attribute类，不需要生成指定类型的代理类，让代码看起来更加的干净。一直以来我只知道有运行时Aop，就没有想到编译时Aop，比如postsharp。然后就找到了Mono.Cecil ，通过改写中间IL代码的方式来实现，大体思路是</p><ol><li>找到标记有指定AopAttribute的方法</li><li>复制该方法并生成一个新的方法copy_method，复制完成后清楚原有方法</li><li>改写原有方法，首先调用AopAttribute的OnStart方法，接着调用copy_method ，调用AopAttribute的OnSuccess方法，最后调用AopAttribute的OnEnd方法</li></ol><blockquote><p>postsharp 1.5 使用注意事项，.net Framework 必须是3.5版本，需要在csproj中增加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;PropertyGroup&gt;</span><br><span class="line">   &lt;PostSharpUseCommandLine&gt;True&lt;/PostSharpUseCommandLine&gt;</span><br><span class="line">   &lt;DontImportPostSharp&gt;True&lt;/DontImportPostSharp&gt;</span><br><span class="line">   &lt;PostSharpDirectory&gt;libs&lt;/PostSharpDirectory&gt;</span><br><span class="line"> &lt;/PropertyGroup&gt;</span><br><span class="line"> </span><br><span class="line">&lt;Import Project=&quot;$(PostSharpDirectory)\PostSharp-1.5.targets&quot; /&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="2-IL"><a href="#2-IL" class="headerlink" title="2. IL "></a><strong>2. IL </strong></h5><p>&emsp;&emsp;说到IL指令就要先知道什么是evaluation stack。而这个evaluation stack却不同于我们平时理解的Call Stack（调用栈），即在调用一个方法时首先会将所有参数压栈，压栈完成后调用指定方法，方法执行完成清理刚刚入栈的参数。我写这个IL指令的时候我也纳闷了，我就在想我大学的时候用Intel x86汇编自己实现小型操作系统的时候也没有遇到这个东西啊，说到栈就Call Stack，这evaluation stack（以下简称EStack）他妈是什么鬼。后来向朋友了解了一下才知道这个是CIL特有的东西，这个是个寄存器，即<code>Stack&lt; Register &gt;</code> 。这样就说通了，我忘了操作结果的存放，学过汇编或了解一些底层的同学应该了解，汇编语言的操作结果都是存放的寄存器中，如32位的ax , bx，64位 eax、ebx等通用寄存器。而不同的CPU又有不同的指令集，如PC机使用的是x86复杂指令集，而Arm使用的是Arm的精简指令集，而CLR直接将兼容不同的寄存器的工作交给使用者处理的话那使用者势必想疯掉，所以VM做一个通用的寄存器来存放操作结果，至于该使用哪个寄存器来存放使用者不需要关心。<br> &emsp;&emsp;至于为什么设计成栈的结构，个人理解一个是栈有内存限制，我们一般使用到的临时变量局部变量或者方法参数都不会太多，当然也可能很多，太多参数的话就该考虑封装了。二个我觉得更重要的是它非常符合调用方法前将参数出入Call Stack的操作，例如我们来执行一下伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 123;</span><br><span class="line">Service service = new Service(&quot;lynch&quot;);</span><br><span class="line">var b = service.GetNumber();</span><br><span class="line">var result = service.Add(a,b);</span><br></pre></td></tr></table></figure><p>在执行Add方法前会先调用GetNumber来获取b的值，整个代码的执行指令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IL_0001:  ldc.i4.s  123   将123赋值给寄存器即放到EStack中 </span><br><span class="line">IL_0003:  stloc.0         将EStack中索引为0的值出栈，并将出栈的值push到Call Stack作为Add方法的入参</span><br></pre></td></tr></table></figure><p>限于篇幅剩下的IL代码就不贴了，从第二行的st前缀指令大家应该可以发现 : 这个指令包含了两个操作，一个从EStack出栈，二个将出栈的值入栈Call Stack。EStack是通过ld入栈而st出栈，就是说使用到某个参数的时候就将其从EStack出栈，而无需再占用栈空间，也就释放了栈内存，是不是有点像Call Stack的操作。个人一些见解，不足之处还望指正。</p><p>&emsp;&emsp;在IL指令中我们会频繁用到如ld ( load )、st(store)等前缀指令，ld前缀指令的意思就是将寄存器的值压栈，也就是将EStack中的值push到Call Stack，而st前缀指令就是将Call Stack中的操作结果存放到寄存器EStack中。大家可以通过这篇文章做个基本了解</p><ul><li><a href="https://www.codeproject.com/Articles/362076/Understanding-Common-Intermediate-Language-CIL" target="_blank" rel="noopener">Understanding Common Intermediate Language (CIL)</a></li></ul><p>如果想深入了解的可以看《Inside Microsoft .NET IL Assembler》，中文版是《Microsoft.NET IL汇编语言程序设计》，不过中文版已经绝版，网上可以找到很多影印版pdf。</p><h5 id="3-Aop的实现"><a href="#3-Aop的实现" class="headerlink" title="3. Aop的实现"></a><strong>3. Aop的实现</strong></h5><p>&emsp;&emsp;这个应该算是postsharp的简单实现，源码放在了Github <a href="https://github.com/linkypi/LexoAop" target="_blank" rel="noopener">LeoxAop</a>上。代码我就不贴了，很多地方都有注释，而且逻辑还算清晰。这里的实现部分参考了<a href="http://www.cnblogs.com/whitewolf/archive/2011/08/09/2132217.html" target="_blank" rel="noopener">MSBuild + MSILInect实现编译时AOP之预览</a>这位博主的实现，不过他写的应该过于匆忙，所以代码结构有些凌乱，不太容易看懂，还用了很多的linq。<br>&emsp;&emsp;这里有一个待解决的问题是将代码注入到指定项目exe或dll后怎么让VS调试到指定的AopAttribute代码，也就是说怎么生成对应的pdb文件让VS感知到。就像.net reflector 一样，反编译dll后自动生成对应的pdb文件，然后就可以顺利的调试。我目前想到的较为简单的方法是在开发者命令中使用ildasm 将文件反编译为il代码，然后再使用ilasm生成对应的pdb文件 :<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ildasm test.exe /out=test.il</span><br><span class="line">ilasm test.il /pdb</span><br></pre></td></tr></table></figure></p><p>不过我试过发现并没有起作用，哪位朋友知道的麻烦告诉我一下，万分感激。就因为这个也花了不少时间，搜google搜codeproject都没有找到相关的文章，实在没办法先搁放在这里，太过纠结容易崩溃。本以为很快能结篇，还不料涉及的东西有点多，写代码调试解决遇到的bug也花不少时间。这里是.net 的实现，其实java也可以这么实现，只是要了解java的字节码，有时间再写吧。</p><p>扩展阅读</p><ul><li><a href="https://www.zhihu.com/question/35777031" target="_blank" rel="noopener">栈式虚拟机和寄存器式虚拟机？</a><h5 id="4-Transaction-实现"><a href="#4-Transaction-实现" class="headerlink" title="4. Transaction 实现"></a><strong>4. Transaction 实现</strong></h5>&emsp;&emsp;终于写到了这了，迫不及待啊。感叹时间飞快。写完这个接下来我想看的东西就是node里边Promise和Async的实现。既然Aop功能已经实现，那我们就可以在OnStart方法开始一个事务，在OnSuccess和OnException提交或回滚事务，但是这里还有几个问题需要考虑：</li></ul><ol><li>就是如果使用者的在自身业务代码就已经做了异常捕获该如何处理，是该回滚还是该提交，这个还没想出来好的解决办法。</li><li>如果有部分连接未能及时释放又该如何处理，对于这个问题可以考虑启动一个线程来监控，根据连接开始创建的时间来做判断。</li><li>底层dao操作需要用到当前连接创建的SqlCommand，要获取到这个那就需要记录连接Id，问题是这个Id只有在相应Aop的On事件时才能拿到。还有没有其他办法呢，因为每个线程执行时用的连接Id都不一样所以我想到一个办法就是将这个变量放到ThreadLocal中，线程跑到哪里它就跟到哪，每个线程都维持着自己的连接Id。如果这个问题不解决那设计这一整个抽象事务就没用了。可能应该还有更好的办法，还没来得及去看Spring中实现，如果有朋友想到更好的办法麻烦告诉我一声，感激不尽！</li><li>连接Id如何保证唯一性。当前我使用的是guid生成，只是一个临时的策略。考虑到分布式架构的话这种生成方式就不太好管理，也不稳妥。我比较喜欢 Twitter 分布式自增Id的实现snowflake，说喜欢是因为它的实现粒度很细，但是没有考虑到它强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。当然也可以参考MongoDb中ObjectId 的生成方式。后来有幸看到朋友转发的一篇文章，里面有说到唯一Id的多种生成方式，还介绍了snowflake及ObjectId的优缺点，最后讲到一种新的生成算法Leaf，大家可以了解下<br><a href="http://mp.weixin.qq.com/s/mY6ulc62pP77Iyl3CiK3dw" target="_blank" rel="noopener">Leaf——来自美团点评的分布式ID生成系统</a><br>&emsp;&emsp;当然如果是分布式架构那没这么简单了，需要考虑分布式事务，涉及两阶段三阶段提交、分布式一致性算法 paxos。不过现在更多的应该考虑放弃强一致性的分布式事务而使用最终一致性。如eBay的实现，在设计上就不采用分布式事务，而是通过其它途径来解决数据一致性问题。其中使用的最重要的技术就是消息队列和消息应用状态表。至于阿里和京东怎么实现就没有深入了解过。eBay 实现参考 :</li></ol><ul><li><a href="http://queue.acm.org/detail.cfm?id=1394128" target="_blank" rel="noopener">Base: An Acid Alternative</a></li></ul><p>最后 Transaction 的实现请参见 <a href="https://github.com/linkypi/Leox.Transaction" target="_blank" rel="noopener">Leox.Transaction</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp; &amp;emsp;最近在实现一个简单的审批功能，涉及到一些事务的处理。一个管控台项目，我使用的是最简单的三层架构。使用的是Ado.net操作数据库。先看一段我们经常用到的事务代码：&lt;br&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="C#" scheme="https://linkypi.github.io/categories/C/"/>
    
      <category term="Aop" scheme="https://linkypi.github.io/categories/C/Aop/"/>
    
    
      <category term="Aop" scheme="https://linkypi.github.io/tags/Aop/"/>
    
      <category term="IL" scheme="https://linkypi.github.io/tags/IL/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Lambda的简单实现</title>
    <link href="https://linkypi.github.io/javascript/lambda/js-lambda/"/>
    <id>https://linkypi.github.io/javascript/lambda/js-lambda/</id>
    <published>2017-03-18T16:00:00.000Z</published>
    <updated>2019-05-07T13:49:10.388Z</updated>
    
    <content type="html"><![CDATA[<center><strong>由来</strong></center><p>今早面试看到一题是说使用js实现.net中的where功能，当时脑子里一片空白，只能回来脑补下（本来想将博客放到github及Blogger上，但限于配置麻烦，暂且放这里）。真心不知道ES6以下的js支不支持 “ =&gt; “， 后来在chrome上测试下竟然支持，我没有打开chrome对ES6的支持。这是一个简单实现，主要使用到了eval，暂时没有考虑其性能，同时实现了 select 及distinct方法，欢迎大牛指正。既然语法支持那就可以对传入的参数做进一步处理，首先将参数转为字符串然后使用正则提取变量及表达式，到使用eval执行语句时再将表达式中的参数替换为指定的值。以下代码还可以重构，可以考虑写一个方法专门解析表达式、增加表达式正确性校验等等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">     <span class="built_in">Array</span>.prototype.where = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> args = <span class="built_in">arguments</span>[<span class="number">0</span>].toString();</span><br><span class="line">         <span class="keyword">var</span> matches = args.match(<span class="regexp">/(\w)(\s+)?=&gt;(.*)+/</span>);</span><br><span class="line">         <span class="keyword">if</span>(!matches)&#123;</span><br><span class="line">         <span class="built_in">console</span>.error(<span class="string">'invalid expression.'</span>);</span><br><span class="line">             <span class="keyword">return</span>;  </span><br><span class="line">         &#125; </span><br><span class="line">         <span class="keyword">var</span> name = matches[<span class="number">1</span>];</span><br><span class="line">         <span class="keyword">var</span> expression = matches[<span class="number">3</span>];</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(!<span class="keyword">this</span>) <span class="keyword">return</span> [];</span><br><span class="line">         <span class="keyword">var</span> result=[];</span><br><span class="line">         <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">eval</span>(<span class="string">'var rpr=/'</span>+ name + <span class="string">'/g'</span>);</span><br><span class="line">   <span class="keyword">var</span> newexp = expression.replace(rpr,value);</span><br><span class="line">   <span class="keyword">var</span> res = <span class="built_in">eval</span>(newexp);</span><br><span class="line">   <span class="keyword">if</span>(res)&#123;</span><br><span class="line">    result.push(value);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="built_in">Array</span>.prototype.select = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> args = <span class="built_in">arguments</span>[<span class="number">0</span>].toString();</span><br><span class="line">         <span class="keyword">var</span> matches = args.match(<span class="regexp">/(\w)(\s+)?=&gt;(.*)+/</span>);</span><br><span class="line">         <span class="keyword">if</span>(!matches)&#123;</span><br><span class="line">         <span class="built_in">console</span>.error(<span class="string">'invalid expression .'</span>);</span><br><span class="line">             <span class="keyword">return</span>;  </span><br><span class="line">         &#125; </span><br><span class="line">         <span class="keyword">var</span> name = matches[<span class="number">1</span>];</span><br><span class="line">         <span class="keyword">var</span> expression = matches[<span class="number">3</span>];</span><br><span class="line">         matches = expression.match(<span class="regexp">/\.(\w+)/</span>);</span><br><span class="line">         <span class="keyword">if</span>(!matches)    &#123;</span><br><span class="line">         <span class="built_in">console</span>.error(<span class="string">'invalid expression .'</span>);</span><br><span class="line">             <span class="keyword">return</span>;  </span><br><span class="line">         &#125; </span><br><span class="line">         <span class="keyword">var</span> property = matches[<span class="number">1</span>];</span><br><span class="line">         <span class="keyword">var</span> result=[];</span><br><span class="line">         <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(value[property])&#123;</span><br><span class="line">    result.push(value[property]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="built_in">Array</span>.prototype.distinct = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> args = <span class="built_in">arguments</span>[<span class="number">0</span>].toString();</span><br><span class="line">         <span class="keyword">var</span> matches = args.match(<span class="regexp">/(\w)(\s+)?=&gt;(.*)+/</span>);</span><br><span class="line">         <span class="keyword">if</span>(!matches)&#123;</span><br><span class="line">         <span class="built_in">console</span>.error(<span class="string">'invalid expression .'</span>);</span><br><span class="line">             <span class="keyword">return</span>;  </span><br><span class="line">         &#125; </span><br><span class="line">         <span class="keyword">var</span> name = matches[<span class="number">1</span>];</span><br><span class="line">         <span class="keyword">var</span> expression = matches[<span class="number">3</span>];</span><br><span class="line">         matches = expression.match(<span class="regexp">/\.(\w+)/</span>);</span><br><span class="line">         <span class="keyword">if</span>(!matches)    &#123;</span><br><span class="line">         <span class="built_in">console</span>.error(<span class="string">'invalid expression .'</span>);</span><br><span class="line">             <span class="keyword">return</span>;  </span><br><span class="line">         &#125; </span><br><span class="line">         <span class="keyword">var</span> property = matches[<span class="number">1</span>];</span><br><span class="line">         <span class="keyword">var</span> result=[];</span><br><span class="line">         <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(value[property])&#123;</span><br><span class="line">    <span class="keyword">var</span> add = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(value[property]==result[i][property])&#123; </span><br><span class="line">    add = <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">break</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(add) result.push(value);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">var</span> mres = [<span class="number">20</span>,<span class="number">33</span>,<span class="number">40</span>,<span class="number">89</span>,<span class="number">55</span>].where(<span class="function"><span class="params">x</span>=&gt;</span>x%<span class="number">5</span>==<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">var</span> seles = [&#123;<span class="attr">age</span>:<span class="number">423</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">120</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'leo'</span>,<span class="attr">age</span>:<span class="number">80</span>&#125;].select(<span class="function"><span class="params">a</span>=&gt;</span>a.age);</span><br><span class="line">     <span class="keyword">var</span> distic = [&#123;<span class="attr">age</span>:<span class="number">423</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">120</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">120</span>&#125;,</span><br><span class="line">                  &#123;<span class="attr">name</span>:<span class="string">'leo'</span>,<span class="attr">age</span>:<span class="number">80</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'leo'</span>,<span class="attr">age</span>:<span class="number">80</span>&#125;].distinct(<span class="function"><span class="params">a</span>=&gt;</span>a.age);</span><br><span class="line">     <span class="built_in">console</span>.log(mres);</span><br></pre></td></tr></table></figure><hr><p>结果</p><p><img src="./1.png" alt="测试结果"></p><p>###<center><strong>性能测试</strong></center></p><p>  昨天看一个篇不错的<a href="http://www.bonashen.com/post/develop/ria-develop/2015-04-08-javascript-lambda-bian-yi-qi-shi-xian" target="_blank" rel="noopener">文章</a>里面使用了10万数据来测试eval及function，看到这个那我也来试试。代码修改如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrs = [],models=[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">arrs.push(i);</span><br><span class="line">models.push(&#123;<span class="attr">age</span>:i,<span class="attr">name</span>:<span class="string">'name'</span>+i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"where"</span>);</span><br><span class="line"><span class="keyword">var</span> mres = arrs.where(<span class="function"><span class="params">x</span>=&gt;</span>x%<span class="number">5</span>==<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"where"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"select"</span>);</span><br><span class="line"><span class="keyword">var</span> seles = models.select(<span class="function"><span class="params">a</span>=&gt;</span>a.age);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"select"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"distinct"</span>);</span><br><span class="line"><span class="keyword">var</span> distic = models.distinct(<span class="function"><span class="params">a</span>=&gt;</span>a.age);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"distinct"</span>);</span><br></pre></td></tr></table></figure></p><p>相比distinct，其他两个 很快就能看到结果，过了7-8分钟还是没有结果，后来看了下代码，自己真是笑死。<br>distinct使用了一个最坏的情况来运行，arrs中没有重复数据，时间复杂度是O(n<sup>2</sup>)，这么看没有个把钟出不来. 那就先让他自己运行吧，刚好和妹子有约，晚上回来在看。晚上11点半到家，结果如下：</p><p><img src="./all.png" alt="这里写图片描述"><br>结果和预期差不多，一个半小时，chrome按F12在debug模式下会慢些。既然如此那就来调整下，一个是where的实现，一个distinct的是实现，select功能少暂时可以不用考虑。</p><p>###<strong>where</strong><br>先看使用eval的实现：<br><img src="./whereeval.png" alt="这里写图片描述"><br>然后是function的实现：</p><p><img src="./wherefunc.png" alt="这里写图片描述"><br>最后看结果：</p><p><img src="./whereresult.png" alt="这里写图片描述"><br>从结果看这差距不是一般的大。</p><p>###<strong>distinct</strong><br>这个然我想起了之前看到的位图算法，用一个bit位来记录某项记录是否已存在，我们可以使用的最小数据类型只能是float及int，可以考虑使用<a href="https://www.web-tinker.com/article/20101.html" target="_blank" rel="noopener">强类型数组</a> Uint32Array。这里有个问题是我们事先并不能知道某一个数的大小，有可能该数据所在的位置已经超出bit_arr的界限，所以这个需要做判断。如果超出则增加bit_arr的长度。然后我的实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bit_arr ;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">get</span> = function(index,offset)&#123;</span><br><span class="line">        <span class="keyword">var</span> value = bit_arr[index]&gt;&gt;offset;</span><br><span class="line">        <span class="keyword">return</span> value &amp; <span class="number">0x01</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = function(index,offset)&#123;</span><br><span class="line">        bit_arr[index] = bit_arr[index]+(<span class="number">1</span>&lt;&lt;offset); </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="built_in">window</span>.distinct = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="built_in">parseInt</span>(arr.length/<span class="number">32</span>) + <span class="number">1</span>;</span><br><span class="line">    bit_arr = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    bit_arr[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> results = [];</span><br><span class="line">        arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr_index = <span class="built_in">parseInt</span>(value/<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">var</span> offset = value%<span class="number">32</span>;</span><br><span class="line">        <span class="keyword">if</span>(!bit_arr[arr_index]) bit_arr[arr_index] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bit = <span class="keyword">get</span>(arr_index,offset);</span><br><span class="line">            if(bit == 0)&#123;</span><br><span class="line">            <span class="keyword">set</span>(arr_index,offset);</span><br><span class="line">            results.push(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return results;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure><p>测试代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrs = [],models=[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">arrs.push(i);</span><br><span class="line"><span class="comment">// models.push(&#123;age:i,name:'name'+i&#125;);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">arrs.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">40000</span>; i++) &#123;</span><br><span class="line">arrs.push(i*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">arrs.push(i*<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"distinct"</span>);</span><br><span class="line">distinct(arrs);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"distinct"</span>);</span><br></pre></td></tr></table></figure></p><p>测试结果：</p><p><img src="./distinct.png" alt="这里写图片描述"></p><p>结果还明显，我多次测试其时间都在130ms左右。</p><p>###<center><strong>总结</strong></center></p><p>   其实很多时候只要有一个点子一个想法都可以去尝试，做出来后定会有收获。有关lambda部分还有很多功能可以实现，像前面提到的那位博主有考虑到缓存function，不过他的lambda表达式是使用字符串包含的，感觉不太雅观。CSDN的编辑器太操蛋，竟然没有自动保存草稿的功能，害我重写，哎…真不够专业。还是马克飞象好些。先这样了，后续有想法再补充。</p><p> 个人github博客地址参见  <a href="http://blog.magicleox.com/" target="_blank" rel="noopener">http://blog.magicleox.com/</a></p><p>有关eval性能的文章：<br><a href="http://www.nowamagic.net/librarys/veda/detail/1627" target="_blank" rel="noopener">http://www.nowamagic.net/librarys/veda/detail/1627</a></p><p><a href="https://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/" target="_blank" rel="noopener">https://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;&lt;strong&gt;由来&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;今早面试看到一题是说使用js实现.net中的where功能，当时脑子里一片空白，只能回来脑补下（本来想将博客放到github及Blogger上，但限于配置麻烦，暂且放这里）。真心不知道ES6以下的j
      
    
    </summary>
    
      <category term="javascript" scheme="https://linkypi.github.io/categories/javascript/"/>
    
      <category term="lambda" scheme="https://linkypi.github.io/categories/javascript/lambda/"/>
    
    
      <category term="javascript" scheme="https://linkypi.github.io/tags/javascript/"/>
    
      <category term="lambda" scheme="https://linkypi.github.io/tags/lambda/"/>
    
  </entry>
  
</feed>
